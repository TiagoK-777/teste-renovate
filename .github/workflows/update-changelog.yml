name: Update CHANGELOG on version bump
on:
  pull_request_target:
    paths:
      # Disparador mais genérico se muitos config.yaml mudam
      - '**/config.yaml'
    types:
      - opened
      - synchronize
permissions:
  contents: write
jobs:
  update-changelog:
    runs-on: ubuntu-latest
    # Use uma matriz para listar os addons e seus caminhos
    strategy:
      matrix:
        addon:
          - name: wpp-connect-addon
            config_path: wpp-connect-addon/config.yaml
            changelog_path: wpp-connect-addon/CHANGELOG.md
            release_repo: wppconnect-team/wppconnect-server
          - name: evolution-api-addon
            config_path: evolution-api-addon/config.yaml
            changelog_path: evolution-api-addon/CHANGELOG.md
            release_repo: EvolutionAPI/evolution-api
    if: github.actor == 'renovate[bot]'
    steps:
      - name: Check out the PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Debug - List files in addon directory
        run: ls -la ${{ matrix.addon.name }}
        # Verifique se os arquivos config.yaml e CHANGELOG.md realmente existem no diretório
        # e com o nome esperado.

      - name: Extract new version from config.yaml for ${{ matrix.addon.name }}
        id: extract
        run: |
          # Verifica se o arquivo config.yaml existe antes de tentar extrair a versão
          if [ ! -f "${{ matrix.addon.config_path }}" ]; then
            echo "Error: config.yaml not found at ${{ matrix.addon.config_path }}"
            exit 1 # Falha o passo se o arquivo não existir
          fi
          NEW_VERSION=$(grep 'version:' "${{ matrix.addon.config_path }}" | sed -E 's/version:\s*"([\w.]+)"\s*//')
          echo "Debug: Extracted version -> $NEW_VERSION"
          if [ -z "$NEW_VERSION" ]; then
            echo "Warning: No version extracted from ${{ matrix.addon.config_path }}. This might be normal if the config wasn't updated."
            echo "version=" >> $GITHUB_OUTPUT # Garante que a variável 'version' é definida (como vazia)
          else
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
        # Execute esta etapa apenas se o config.yaml da matriz for um dos arquivos alterados no PR
        # ATENÇÃO: Dependendo de como o RenovateBot funciona ou se o PR altera múltiplos addons,
        #             você pode querer remover esta condição ou ajustar a lógica.
        #             Para depuração inicial, talvez seja melhor remover a condição ou
        #             ter certeza de que o `config.yaml` do addon foi alterado.
        # if: contains(github.event.pull_request.changed_files, matrix.addon.config_path)


      - name: Get release info from GitHub for ${{ matrix.addon.name }}
        id: release
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "Skipping release info: No version extracted."
            echo "body=" >> $GITHUB_OUTPUT # Define 'body' como vazio se não há versão
            exit 0 # Sai com sucesso, mas sem tentar obter release info
          fi
          
          # Use CURL com -f para falhar se houver erro HTTP (ex: 404 Not Found)
          # Adicione o Authorization header se o release_repo for privado ou para evitar rate limits mais rápido.
          RELEASE_INFO=$(curl -s -f -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ matrix.addon.release_repo }}/releases/tags/v$VERSION")
          
          if [ $? -ne 0 ]; then # Verifica o código de saída do curl
            echo "Error fetching release info for v$VERSION from ${{ matrix.addon.release_repo }}. HTTP errors or not found."
            echo "body=" >> $GITHUB_OUTPUT
            exit 1 # Falha a etapa se o CURL falhar
          fi
          
          echo "Debug: Raw API response -> $RELEASE_INFO"
          
          # Extrai o corpo da release
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r .body)
          
          if [ "$RELEASE_BODY" = "null" ] || [ -z "$RELEASE_BODY" ]; then
            echo "Warning: Release body is empty or 'null' for v$VERSION."
            echo "body=" >> $GITHUB_OUTPUT # Garante que 'body' é vazio se não houver conteúdo
          else
            echo "body<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
        if: steps.extract.outputs.version != '' # Garante que roda somente se a versão foi extraída


      - name: Prepend to CHANGELOG.md for ${{ matrix.addon.name }}
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "Skipping CHANGELOG update: No version extracted."
            exit 0
          fi
          
          DATE=$(date +%Y-%m-%d)
          RELEASE_BODY="${{ steps.release.outputs.body }}"
          
          # Conteúdo que será pré-adicionado
          NEW_CHANGELOG_ENTRY_HEADER="## [${VERSION}] - ${DATE}"
          NEW_CHANGELOG_ENTRY_BODY="$RELEASE_BODY"
          
          echo "Debug: Proposed new CHANGELOG entry header: $NEW_CHANGELOG_ENTRY_HEADER"
          echo "Debug: Proposed new CHANGELOG entry body: $NEW_CHANGELOG_ENTRY_BODY"
          
          # Verifica se o arquivo CHANGELOG.md existe. Se não, cria um vazio.
          if [ ! -f "${{ matrix.addon.changelog_path }}" ]; then
            echo "Warning: CHANGELOG file not found at ${{ matrix.addon.changelog_path }}. Creating an empty one."
            mkdir -p "$(dirname "${{ matrix.addon.changelog_path }}")" # Cria o diretório se não existir
            touch "${{ matrix.addon.changelog_path }}"
          fi
          
          # Crie o conteúdo completo no temp.md
          {
            echo "$NEW_CHANGELOG_ENTRY_HEADER"
            echo "$NEW_CHANGELOG_ENTRY_BODY"
            echo # Adiciona uma linha em branco para separar da entrada anterior
            cat "${{ matrix.addon.changelog_path }}" # Adiciona o conteúdo existente do CHANGELOG.md
          } > temp.md
          
          # Move temp.md para sobrescrever o CHANGELOG.md original
          mv temp.md "${{ matrix.addon.changelog_path }}"
          
          echo "Debug: Content of ${{ matrix.addon.changelog_path }} after prepend (first 1000 chars):"
          head -c 1000 "${{ matrix.addon.changelog_path }}"
          echo "..."
          # Adicione o comando 'ls -la' para verificar o tamanho do arquivo
          ls -la "${{ matrix.addon.changelog_path }}"
        if: steps.extract.outputs.version != ''


      - name: Commit and push changes for ${{ matrix.addon.name }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file_pattern: ${{ matrix.addon.changelog_path }}
          branch: ${{ github.event.pull_request.head.ref }}
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_message: |
            docs(${
              {
                'wpp-connect-addon': 'wpp-connect',
                'evolution-api-addon': 'evolution-api'
              }[matrix.addon.name] or 'general'
            }): update CHANGELOG for ${{ matrix.addon.name }} version ${{ steps.extract.outputs.version }}
          push_options: --force
        if: steps.extract.outputs.version != ''